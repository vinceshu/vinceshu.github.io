{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://vinceshu.cn","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-07-24T14:13:04.240Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"/404.html","permalink":"http://vinceshu.cn/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-07-25T09:00:46.006Z","updated":"2019-08-01T11:17:12.000Z","comments":true,"path":"links/index.html","permalink":"http://vinceshu.cn/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-07-24T14:13:04.250Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"categories/index.html","permalink":"http://vinceshu.cn/categories/index.html","excerpt":"","text":""},{"title":"书单","date":"2020-07-24T14:13:04.248Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"books/index.html","permalink":"http://vinceshu.cn/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-07-25T10:58:32.843Z","updated":"2020-07-25T10:58:32.843Z","comments":false,"path":"about/index.html","permalink":"http://vinceshu.cn/about/index.html","excerpt":"","text":"一个即将步入社会的新人，将从事java开发相关工作，少掉头发，努力搞钱。1234567891011121314151617181920212223&#123; name: 'vinceshu' age: '21', gender: '男', profession: 'Java Developer &amp; Designer', experience: 'null', address: '广东省深圳市', education: '本科', github: 'https://github.com/vinceshu', blog: 'http://vinceshu.gitee.io', email: 'vinceshu@163.com', description: '我只想搞钱', skills: [ ['Java', 'Mysql', 'redis', 'JVM', 'Vue.js', 'Navicat'], ['Spring', 'SpringMvc', 'Mybatis', 'SpringBoot'], ['SpringCloud','Nginx','RabbitMQ','Docker', 'FastDFS'], ['IDEA', 'Maven', 'Git', 'SVN'], ['HTML', 'CSS', 'Jquery', 'Vue,js', 'Thymeleaf'], ['tomcat', 'jetty', 'linux'], ]&#125;"},{"title":"标签","date":"2020-07-24T14:13:04.253Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"tags/index.html","permalink":"http://vinceshu.cn/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-07-24T14:13:04.252Z","updated":"2019-08-01T11:17:12.000Z","comments":false,"path":"repository/index.html","permalink":"http://vinceshu.cn/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Java\t数据类型转换、运算符、方法入门","slug":"Java  数据类型转换、运算符、方法入门","date":"2019-11-21T09:36:28.000Z","updated":"2020-07-26T15:25:56.648Z","comments":true,"path":"2019/11/21/Java  数据类型转换、运算符、方法入门/","link":"","permalink":"http://vinceshu.cn/2019/11/21/Java%20%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/","excerpt":"","text":"Java 数据类型转换、运算符、方法入门 文章内容123456数据类型转换算数运算符比较运算符逻辑运算符三元运算符简单方法定义和调用 学习目标123456789101112理解数据类型的强制转换理解数据类型的自动转换了解ASCII编码表理解int类型和char类型的运算原理理解运算符++ - -的运算方式理解+符号在字符串中的作用理解比较运算符理解逻辑运算符掌握三元运算符的格式和计算结果了解方法的概念掌握无返回值无参数方法的定义格式了解方法定义的注意事项 第一章 数据类型转换Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。 1. 1 自动转换一个int 类型变量和一个byte类型变量进行加法运算， 结果会是什么数据类型？运算结果，变量的类型将是int 类型，这就是出现了数据类型的自动类型转换现象。123自动转换：将取值范围小的类型自动提升为取值范围大的类型 。int i &#x3D; 1 ;byte b &#x3D; 2 ; 转换原理图解byte 类型内存占有 1 个字节，在和int 类型运算时会提升为int类型 ，自动补充 3 个字节，因此计算后的结果还是int 类型。同样道理，当一个int 类型变量和一个double 变量运算时，int 类型将会自动提升为double 类型进行运算。 转换规则范围小的类型向范围大的类型提升，byte、short、char 运算时直接提升为int 。 1. 2 强制转换1234567891011121314151617public static void main(String[] args) &#123;int i = 1 ;byte b = 2 ;// byte x = b + i; // 报错//int类型和byte类型运算，结果是int类型int j = b + i;System.out.println(j);&#125;public static void main(String[] args) &#123;int i = 1 ;double d = 2. 5 ;//int类型和double类型运算，结果是double类型//int类型会提升为double类型double e = d+i;System.out.println(e);&#125;byte、short、char‐‐&gt;int‐‐&gt;long‐‐&gt;float‐‐&gt;double 1. 2 强制转换将 1. 5 赋值到int 类型变量会发生什么？产生编译失败，肯定无法赋值。double 类型内存 8 个字节，int 类型内存 4 个字节。 1. 5 是double 类型，取值范围大于int 。可以理解为double 是 8升的水壶，int 是 4 升的水壶，不能把大水壶中的水直接放进小水壶去。想要赋值成功，只有通过强制类型转换，将double 类型强制转换成int 类型才能赋值。1强制类型转换：将取值范围大的类型强制转换成取值范围小的类型。比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。转换格式：将 1. 5 赋值到int 类型，代码修改为：同样道理，当一个short类型与 1 相加，我们知道会类型提升，但是还想给结果赋值给short类型变量，就需要强制转换。 转换原理图解1int i &#x3D; 1. 5 ; &#x2F;&#x2F; 错误 数据类型 变量名 = （数据类型）被转数据值；123456789101112131415// double类型数据强制转成int类型，直接去掉小数点。int i = (int) 1. 5 ;public static void main(String[] args) &#123;//short类型变量，内存中 2 个字节short s = 1 ;/*出现编译失败s和 1 做运算的时候， 1 是int类型，s会被提升为int类型s+ 1 后的结果是int类型，将结果在赋值会short类型时发生错误short内存 2 个字节，int类型 4 个字节必须将int强制转成short才能完成赋值*/s = s + 1 ；//编译失败s = (short)(s+ 1 );//编译成功&#125; 强烈注意 浮点转成整数，直接取消小数点，可能造成数据损失精度。1int 强制转成short 砍掉 2 个字节，可能造成数据丢失。 1. 3 ASCII编码表 在计算机的内部都是二进制的 0 、 1 数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念。 编码表 ：就是将人类的文字和一个十进制数进行对应起来组成一张表格。1234567891011// 定义s为short范围内最大值short s = 32767 ;// 运算后，强制转换，砍掉 2 个字节后会出现不确定的结果s = (short)(s + 10 );public static void main(String[] args) &#123;//字符类型变量char c = 'a';int i = 1 ;//字符类型和int类型计算System.out.println(c+i);//输出结果是 98&#125; 算数运算符包括： + 加法运算，字符串连接运算 - 减法运算 * 乘法运算 / 除法运算 % 取模运算，两个数字相除取余数 ++ 、 - - 自增自减运算 字符 数值 0 48 9 57 A 65 Z 9012a 97z 122 人们就规定： 将所有的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（1234American Standard Code for Information Interchange 美国标准信息交换码）。小贴士：在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到 97 ，再和 1 求和，结果为 98 。char类型提升为了int类型。char类型内存 2 个字节，int类型内存 4 个字节。 第二章 运算符 2. 1 算数运算符Java中，整数使用以上运算符，无论怎么计算，也不会得到小数。 ++ 运算，变量自己增长 1 。反之，-- 运算，变量自己减少 1 ，用法与++ 一致。 独立运算： 变量在独立运算时，前和后没有区别 。123456变量前++ ：例如 ++i 。变量后++ ：例如 i++ 。public static void main(String[] args) &#123;int i = 1234 ;System.out.println(i/ 1000 * 1000 );//计算结果是 1000&#125; 赋值运算符包括： = 等于号 += 加等于 - = 减等于 *= 乘等于 /= 除等于 %= 取模等 混合运算： 和其他变量放在一起，前和后就产生了不同。123变量前++ ：变量a自己加 1 ，将加 1 后的结果赋值给b，也就是说a先计算。a和b的结果都是 2 。变量后++ ：变量a先把自己的值 1 ，赋值给变量b，此时变量b的值就是 1 ，变量a自己再加 1 。a的结果是 2 ，b的结果是 1 。 + 符号在字符串中的操作： + 符号在遇到字符串的时候，表示连接、拼接的含义。1&quot;a&quot;+&quot;b&quot;的结果是“ab”，连接含义 2. 2 赋值运算符 赋值运算符，就是将符号右边的值，赋给左边的变量。 2. 3 比较运算符1234567891011121314151617181920public static void main(String[] args) &#123;int a = 1 ;int b = ++a;System.out.println(a);//计算结果是 2System.out.println(b);//计算结果是 2&#125;public static void main(String[] args) &#123;int a = 1 ;int b = a++;System.out.println(a);//计算结果是 2System.out.println(b);//计算结果是 1&#125;public static void main(String[] args)&#123;System.out.println(\" 5 + 5 =\"+ 5 + 5 );//输出 5 + 5 = 55&#125;public static void main(String[] args)&#123;int i = 5 ;i+= 5 ;//计算方式 i=i+ 5 变量i先加 5 ，再赋值变量iSystem.out.println(i); //输出结果是 10 &#125; 比较运算符包括：123456== 比较符号两边数据是否相等，相等结果是true。&lt; 比较符号左边的数据是否小于右边的数据，如果小于结果是true。&gt; 比较符号左边的数据是否大于右边的数据，如果大于结果是true。&lt;= 比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。&gt;= 比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。！= 不等于符号 ，如果符号两边的数据不相等，结果是true。 逻辑运算符包括： &amp;&amp; 短路与1231. 两边都是true，结果是true2. 一边是false，结果是false短路特点：符号左边是false，右边不再运算 || 短路或1231. 两边都是false，结果是false2. 一边是true，结果是true短路特点： 符号左边是true，右边不再运算 ！ 取反121.! true 结果是false2.! false结果是true 2. 3 比较运算符1比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值true或者false 。 2. 4 逻辑运算符123456789逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值true或者falsepublic static void main(String[] args) &#123;System.out.println( 1 == 1 );//trueSystem.out.println( 1 &lt; 2 );//trueSystem.out.println( 3 &gt; 4 );//falseSystem.out.println( 3 &lt;= 4 );//trueSystem.out.println( 3 &gt;= 4 );//falseSystem.out.println( 3 != 4 );//true&#125; 2. 5 三元运算符 三元运算符格式： 三元运算符计算方式：12布尔类型表达式结果是true，三元运算符整体结果为结果 1 ，赋值给变量。布尔类型表达式结果是false，三元运算符整体结果为结果 2 ，赋值给变量。 第三章 方法入门 3. 1 概述我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且重复的代码过多。能否避免这些重复的代码呢，就需要使用方法来实现。1方法：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。 3. 2 方法的定义 定义格式： 定义格式解释：12345678910修饰符： 目前固定写法 public static 。public static void main(String[] args) &#123;System.out.println(true &amp;&amp; true);//trueSystem.out.println(true &amp;&amp; false);//falseSystem.out.println(false &amp;&amp; true);//false，右边不计算System.out.println(false || false);//falaseSystem.out.println(false || true);//trueSystem.out.println(true || false);//true，右边不计算System.out.println(!false);//true&#125; 数据类型 变量名 = 布尔类型表达式？结果 1 ：结果 2123456public static void main(String[] args) &#123;int i = ( 1 == 2 ? 100 : 200 );System.out.println(i);// 200int j = ( 3 &lt;= 4 ? 500 : 600 );System.out.println(j);// 500&#125; 修饰符 返回值类型 方法名 （参数列表）｛ 代码…1234567return ;｝返回值类型： 目前固定写法 void ，其他返回值类型在后面的课程讲解。方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法。参数列表： 目前无参数， 带有参数的方法在后面的课程讲解。return：方法结束。因为返回值类型是void，方法大括号内的return可以不写。举例： 3. 3 方法的调用方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名字就可以调用了。 3. 4 调用练习 将三元运算符代码抽取到自定义的方法中，并调用。 3. 5 注意事项 方法定义注意事项： 方法必须定义在一类中方法外 方法不能定义在另一个方法的里面123456789101112131415161718192021222324public static void methodName() &#123;System.out.println(\"这是一个方法\");&#125;public static void main(String[] args) &#123;//调用定义的方法methodmethod();&#125;//定义方法，被main方法调用public static void method() &#123;System.out.println(\"自己定义的方法，需要被main调用运行\");&#125;public static void main(String[] args) &#123;//调用定义的方法operatoroperator();&#125;//定义方法，方法中定义三元运算符public static void operator() &#123;int i = 0 ;i = ( 1 == 2 ? 100 : 200 );System.out.println(i);int j = 0 ;j = ( 3 &lt;= 4 ? 500 : 600 );System.out.println(j);&#125; 第四章 JShell脚本工具 JShell脚本工具是JDK 9 的新特性什么时候会用到JShell工具呢，当我们编写的代码非常少的时候，而又不愿意编写类，main方法，也不愿意去编译和运行，这个时候可以使用JShell工具。启动JShell工具，在DOS命令行直接输入JShell命令。接下来可以编写Java代码，无需写类和方法，直接写方法中的代码即可，同时无需编译和运行，直接回车即可123456789101112public class Demo &#123;public static void main(String[] args)&#123;&#125;//正确写法，类中，main方法外面可以定义方法public static void method()&#123;&#125;&#125;public class Demo &#123;public static void main(String[] args)&#123;//错误写法，一个方法不能定义在另一方法内部public static void method()&#123;&#125;&#125;&#125; 小贴士:1JShell工具，只适合片段代码的测试，开发更多内容，建议编写在方法中。 第五章 扩展知识点 5. 1 +=符号的扩展 下面的程序有问题吗？分析： s += 1 逻辑上看作是s = s + 1 计算结果被提升为int类型，再向short类型赋值时发生错误，因为不能将取值范围大的类型赋值到取值范围小的类型。但是，s=s+ 1 进行两次运算，+= 是一个运算符，只运算一次，并带有强制转换的特点，也就是说s += 1 就是s = (short)(s + 1 )，因此程序没有问题编译通过，运行结果是 2. 5. 2 常量和变量的运算 下面的程序有问题吗？12345public static void main(String[] args)&#123;short s = 1 ;s+= 1 ;System.out.println(s);&#125;分析：b 3 = 1 + 2 ， 1 和 2 是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了 1 + 2 的结果并没有超过byte类型的取值范围，可以赋值给变量b 3 ，因此b 3 = 1 + 2 是正确的。反之，b 4 = b 2 + b 3 ，b 2 和 b 3 是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定b 2 +b 3 的结果是什么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。在jshell中体现：12345678public static void main(String[] args)&#123;byte b 1 = 1 ;byte b 2 = 2 ;byte b 3 = 1 + 2 ;byte b 4 =b 1 + b 2 ;System.out.println(b 3 );System.out.println(b 4 );&#125;","categories":[{"name":"java","slug":"java","permalink":"http://vinceshu.cn/categories/java/"}],"tags":[{"name":"javase","slug":"javase","permalink":"http://vinceshu.cn/tags/javase/"},{"name":"java基础","slug":"java基础","permalink":"http://vinceshu.cn/tags/java%E5%9F%BA%E7%A1%80/"}]},{"title":"Java  前言、入门程序、常量、变量","slug":"Java  前言、入门程序、常量、变量","date":"2019-11-21T08:56:18.000Z","updated":"2020-07-26T15:41:54.646Z","comments":true,"path":"2019/11/21/Java  前言、入门程序、常量、变量/","link":"","permalink":"http://vinceshu.cn/2019/11/21/Java%20%20%E5%89%8D%E8%A8%80%E3%80%81%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F/","excerpt":"","text":"Java 前言、入门程序、常量、变量 文章内容1234Java语言的发展历史Java开发环境搭建编写HelloWorld程序常量和变量 学习目标1234567891011能够计算二进制和十进制数之间的互转能够使用常见的DOS命令理解Java语言的跨平台实现原理理解JDK和JRE的组成和作用能够配置环境变量JAVA_HOME能够编写HelloWorld程序编译并执行理解关键字的含义理解标识符的含义能够定义出所有类型的常量理解Java中的基本数据类型分类能够定义 8 种基本数据集类型的变量 第一章 开发前言 1. 1 Java语言概述 什么是Java语言Java语言是美国Sun公司（Stanford University Network），在 1995 年推出的高级的编程语言。所谓编程语言，是计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。 Java语言发展历史12345671995 年Sun公司发布Java 1. 0 版本1997 年发布Java 1. 1 版本1998 年发布Java 1. 2 版本2000 年发布Java 1. 3 版本2002 年发布Java 1. 4 版本2004 年发布Java 1. 5 版本2006 年发布Java 1. 6 版本1232009 年Oracle甲骨文公司收购Sun公司，并于 2011 发布Java 1. 7 版本2014 年发布Java 1. 8 版本2017 年发布Java 9. 0 版本 Java语言能做什么Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。![](…\\source\\img\\java 前言、入门程序、常量、变量\\JD.png)![shunfeng](E:\\blog\\source\\img\\java 前言、入门程序、常量、变量\\shunfeng.png)![TB](…\\source\\img\\java 前言、入门程序、常量、变量\\TB.png) 1. 2 计算机基础知识 二进制 计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含0 、 1 两个数，逢二进一， 1 + 1 = 10 。每一个 0 或者每一个 1 ，叫做一个bit（比特）。下面了解一下十进制和二进制数据之间的转换计算。1十进制数据转成二进制数据：使用除以 2 获取余数的方式 二进制数据转成十进制数据：使用 8421 编码的方式12小贴士：二进制数系统中，每个 0 或 1 就是一个位，叫做bit（比特）。 字节 字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性， 我们可以查看文件的字节大小。8 个bit（二进制位） 0000 - 0000 表示为 1 个字节，写成 1 byte或者 1 B。123458 bit &#x3D; 1 B1024 B &#x3D; 1 KB1024 KB &#x3D; 1 MB1024 MB &#x3D; 1 GB1024 GB &#x3D; 1 TB 常用DOS命令Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取代，对于我们开发人员，目前需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。1进入DOS操作窗口1按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。1打开DOS命令行后，看到一个路径 c:\\user 就表示我们现在操作的磁盘是c盘。 命令 操作符号 盘符切换命令 盘符名:1查看当前文件夹 dir1进入文件夹命令 cd 文件夹名1退出文件夹命令 cd..1退出到磁盘根目录 cd\\1清屏 cls 常用命令 第二章 Java语言开发环境搭建 2. 1 Java虚拟机——JVM12JVM（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在JVM 之上。123跨平台：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系统上，这个特性称为Java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM运行在操作系统上。如图所示，Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。 2. 2 JRE 和 JDK12JRE (Java Runtime Environment) ：是Java程序的运行时环境，包含JVM 和运行时所需要的核心类库 。JDK (Java Development Kit)：是Java程序开发工具包，包含JRE 和开发人员使用的工具。我们想要运行一个已有的Java程序，那么只需安装JRE 即可。我们想要开发一个全新的Java程序，那么必须安装JDK 。 小贴士： 三者关系： JDK &gt; JRE &gt; JVM 2. 3 JDK 9 安装图解 小贴士： 安装路径中，不要包含中文和空格。 2. 4 JAVA_HOME环境变量的配置 配置环境变量作用开发Java程序，需要使用JDK中提供的工具，工具在JDK 9 安装目录的bin 目录下。在DOS命令行下使用这些工具，就要先进入到JDK的bin目录下，这个过程就会非常的麻烦。不进入JDK的bin目录，这些工具就不能使用，会报错。 为了开发方便，我们想在任意的目录下都可以使用JDK的开发工具，则必须要配置环境变量，配置环境变量的意义 在于告诉操作系统，我们使用的JDK开发工具在哪个目录下。 配置环境变量步骤Windows 7 , 8 版本123456781. 计算机鼠标右键,选择属性2. 选择高级系统设置3. 高级 选项卡，点击环境变量4. 点击新建 ，创建新的环境变量5. 变量名输入JAVA_HOME，变量值输入JDK 9 的安装目录 c:\\Java 9 \\jdk- 9. 0. 16. 选中Path 环境变量，双击或者点击编辑7. 在变量值的最前面，键入%JAVA_HOME%\\bin; 分号必须要写，必须是英文格式。8. 环境变量配置完成，重新开启DOS命令行，在任意目录下输入javac 命令，运行成功。Windows 10 版本1231. 文件资源管理器 - -&gt; 此电脑鼠标右键 - -&gt; 选择属性2. 选择高级系统设置 - -&gt; 选择 环境变量3. 点击下方系统变量的 新建 ，创建新的环境变量，变量名输入JAVA_HOME，变量值输入JDK 9 的安装目录1D:\\ 02 _DevelopTools\\Java\\jdk- 9. 0. 1选中Path 环境变量，双击或者点击编辑点击新建，键入%JAVA_HOME%\\bin ，必须是英文格式。选中该行，上移到最上方，点击确定。环境变量配置完成，重新开启DOS命令行，在任意目录下输入javac 命令。 第三章 HelloWorld入门程序 3. 1 程序开发步骤说明开发环境已经搭建完毕，可以开发我们第一个Java程序了。Java程序开发三步骤：编写、编译、运行。 3. 2 编写Java源程序1231. 在d:\\day 01 目录下新建文本文件，完整的文件名修改为HelloWorld.java，其中文件名为HelloWorld，后缀名必须为.java 。2. 用记事本打开12使用notepad++记事本软件。3. 在文件中键入文本并保存，代码如下：1文件名必须是HelloWorld ，保证文件名和类的名字是一致的，注意大小写。1每个字母和符号必须与示例代码一模一样。第一个HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的Java源文件 编译成JVM可以看懂的字节码文件 。 3. 3 编译Java源文件在DOS命令行中，进入Java源文件的目录，使用javac 命令进行编译。命令： 举例：编译成功后，命令行没有任何提示。打开d:\\day 01 目录，发现产生了一个新的文件^ HelloWorld.class，该文件就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。12Java源文件的编译工具javac.exe，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。 3. 4 运行Java程序在DOS命令行中，进入Java源文件的目录，使用java 命令进行运行。命令： 举例：12345public class HelloWorld &#123;public static void main(String[] args) &#123;System.out.println(&quot;Hello World!&quot;);&#125;&#125;1javac Java源文件名.后缀名1javac HelloWorld.java1java 类名字1java HelloWorld1java HelloWord 不要写 不要写 不要写 .class12Java程序.class文件 的运行工具java.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目录下使用。 3. 5 入门程序说明 编译和运行是两回事123编译：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中，javac 编译器会检查我们所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。运行：是指将class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。 关于main方法12main方法：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多少程序，JVM在运行的时候，都会从main方法这里开始执行。 3. 6 添加注释comment 注释：就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须 要的，它不影响程序的编译和运行。123Java中有单行注释和多行注释单行注释以 &#x2F;&#x2F;开头 换行结束多行注释以 &#x2F;*开头 以*&#x2F;结束 3. 7 关键字keywords1234关键字：是指在程序中，Java已经定义好的单词，具有特殊含义。HelloWorld案例中，出现的关键字有 public 、class 、 static 、 void 等，这些单词已经被Java定义好，全部都是小写字母，notepad++中颜色特殊。关键字比较多，不能死记硬背，学到哪里记到哪里即可。 3. 8 标识符 标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。1HelloWorld案例中，出现的标识符有类名字HelloWorld 。 类型 含义 数据举例 整数常量 所有的整数 0 ， 1 ， 567 ， - 9 小数常量 所有的小数 0. 0 ， - 0. 1 ， 2. 551字符常量 单引号引起来,只能写一个字符,必须有内容 &#39;a&#39; ， &#39; &#39;， &#39;好&#39;1字符串常量 双引号引起来,可以写多个字符,也可以不写 &quot;A&quot; ，&quot;Hello&quot; ，&quot;你好&quot; ，&quot;&quot;1布尔常量 只有两个值（流程控制中讲解） true ， false1空常量 只有一个值（引用数据类型中讲解） null 命名规则：硬性要求 标识符可以包含英文字母 26 个(区分大小写)、 0 - 9 数字 、$（美元符号）和_（下划线）。 标识符不能以数字开头。 标识符不能是关键字。 命名规范：软性建议 类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。 方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。 变量名规范：全部小写。 第四章 常量 4. 1 概述常量：是指在Java程序中固定不变的数据。 4. 2 分类 4. 3 练习 需求：输出各种类型的常量。12345678910111213public class ConstantDemo &#123;public static void main(String[] args)&#123;&#x2F;&#x2F;输出整数常量System.out.println( 123 );&#x2F;&#x2F;输出小数常量System.out.println( 0. 125 );&#x2F;&#x2F;输出字符常量System.out.println(&#39;A&#39;);&#x2F;&#x2F;输出布尔常量System.out.println(true);&#x2F;&#x2F;输出字符串常量System.out.println(&quot;你好Java&quot;);&#125; 数据类型 关键字 内存占用 取值范围1字节型 byte 1 个字节 - 128 ~ 1271短整型 short 2 个字节 - 32768 ~ 327671整型 int（默认） 4 个字节 - 231 次方~ 2 的 31 次方- 11长整型 long 8 个字节 - 2 的 63 次方~ 2 的 63 次方- 11单精度浮点数 float 4 个字节 1. 4013 E- 45 ~ 3. 4028 E+ 381双精度浮点数 double（默认） 8 个字节 4. 9 E- 324 ~ 1. 7977 E+ 3081字符型 char 2 个字节 0 - 655351布尔类型 boolean 1 个字节 true，false 第五章 变量和数据类型 5. 1 变量概述 变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。1数学中，可以使用字母代替数字运算,例如 x&#x3D; 1 + 5 或者 6 &#x3D;x+ 5 。12程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存 5 ，x也可以保存 6 ，这样x保存的数据是可以改变的，也就是我们所讲解的变量。Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。 5. 2 数据类型 数据类型分类Java的数据类型分为两大类：12基本数据类型：包括 整数、浮点数、字符、布尔。引用数据类型：包括 类、数组、接口。 基本数据类型 四类八种基本数据类型：1Java中的默认类型：整数类型是int 、浮点类型是double 。 5. 3 变量的定义 } 变量定义的格式包括三个要素：数据类型 、 变量名 、 数据值 。 格式 练习 定义所有基本数据类型的变量，代码如下：1long类型：建议数据后加L表示。1float类型：建议数据后加F表示。 5. 4 注意事项 变量名称：在同一个大括号范围内，变量的名字不可以相同。 变量赋值：定义的变量，不赋值不能使用。 数据类型 变量名 = 数据值;12345678910111213141516171819202122232425262728public class Variable &#123;public static void main(String[] args)&#123;&#x2F;&#x2F;定义字节型变量byte b &#x3D; 100 ;System.out.println(b);&#x2F;&#x2F;定义短整型变量short s &#x3D; 1000 ;System.out.println(s);&#x2F;&#x2F;定义整型变量int i &#x3D; 123456 ;System.out.println(i);&#x2F;&#x2F;定义长整型变量long l &#x3D; 12345678900 L;System.out.println(l);&#x2F;&#x2F;定义单精度浮点型变量float f &#x3D; 5. 5 F;System.out.println(f);&#x2F;&#x2F;定义双精度浮点型变量double d &#x3D; 8. 5 ;System.out.println(d);&#x2F;&#x2F;定义布尔型变量boolean bool &#x3D; false;System.out.println(bool);&#x2F;&#x2F;定义字符型变量char c &#x3D; &#39;A&#39;;System.out.println(c);&#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://vinceshu.cn/categories/java/"}],"tags":[{"name":"javase","slug":"javase","permalink":"http://vinceshu.cn/tags/javase/"},{"name":"java基础","slug":"java基础","permalink":"http://vinceshu.cn/tags/java%E5%9F%BA%E7%A1%80/"}]}],"categories":[{"name":"java","slug":"java","permalink":"http://vinceshu.cn/categories/java/"}],"tags":[{"name":"javase","slug":"javase","permalink":"http://vinceshu.cn/tags/javase/"},{"name":"java基础","slug":"java基础","permalink":"http://vinceshu.cn/tags/java%E5%9F%BA%E7%A1%80/"}]}