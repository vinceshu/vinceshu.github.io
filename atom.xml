<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vinceshu.cn/"/>
  <updated>2020-07-26T15:25:56.648Z</updated>
  <id>http://vinceshu.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java	数据类型转换、运算符、方法入门</title>
    <link href="http://vinceshu.cn/2019/11/21/Java%20%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    <id>http://vinceshu.cn/2019/11/21/Java%20%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E6%96%B9%E6%B3%95%E5%85%A5%E9%97%A8/</id>
    <published>2019-11-21T09:36:28.000Z</published>
    <updated>2020-07-26T15:25:56.648Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="java数据类型转换-运算符-方法入门"><a class="markdownIt-Anchor" href="#java数据类型转换-运算符-方法入门"></a> Java数据类型转换、运算符、方法入门</h1><h1 id="文章内容"><a class="markdownIt-Anchor" href="#文章内容"></a> 文章内容</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">数据类型转换</span><br><span class="line">算数运算符</span><br><span class="line">比较运算符</span><br><span class="line">逻辑运算符</span><br><span class="line">三元运算符</span><br><span class="line">简单方法定义和调用</span><br></pre></td></tr></table></figure><h1 id="学习目标"><a class="markdownIt-Anchor" href="#学习目标"></a> 学习目标</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">理解数据类型的强制转换</span><br><span class="line">理解数据类型的自动转换</span><br><span class="line">了解ASCII编码表</span><br><span class="line">理解int类型和char类型的运算原理</span><br><span class="line">理解运算符++ - -的运算方式</span><br><span class="line">理解+符号在字符串中的作用</span><br><span class="line">理解比较运算符</span><br><span class="line">理解逻辑运算符</span><br><span class="line">掌握三元运算符的格式和计算结果</span><br><span class="line">了解方法的概念</span><br><span class="line">掌握无返回值无参数方法的定义格式</span><br><span class="line">了解方法定义的注意事项</span><br></pre></td></tr></table></figure><h1 id="第一章-数据类型转换"><a class="markdownIt-Anchor" href="#第一章-数据类型转换"></a> 第一章 数据类型转换</h1><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换。</p><h1 id="1-1-自动转换"><a class="markdownIt-Anchor" href="#1-1-自动转换"></a> 1. 1 自动转换</h1><p>一个int 类型变量和一个byte类型变量进行加法运算， 结果会是什么数据类型？</p><p>运算结果，变量的类型将是int 类型，这就是出现了数据类型的自动类型转换现象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自动转换：将取值范围小的类型自动提升为取值范围大的类型 。</span><br><span class="line">int i &#x3D;  1 ;</span><br><span class="line">byte b &#x3D;  2 ;</span><br></pre></td></tr></table></figure><h2 id="转换原理图解"><a class="markdownIt-Anchor" href="#转换原理图解"></a> 转换原理图解</h2><p>byte 类型内存占有 1 个字节，在和int 类型运算时会提升为int类型 ，自动补充 3 个字节，因此计算后的结果还是int 类<br>型。</p><p>同样道理，当一个int 类型变量和一个double 变量运算时，int 类型将会自动提升为double 类型进行运算。</p><h2 id="转换规则"><a class="markdownIt-Anchor" href="#转换规则"></a> 转换规则</h2><p>范围小的类型向范围大的类型提升，byte、short、char 运算时直接提升为int 。</p><h1 id="1-2-强制转换"><a class="markdownIt-Anchor" href="#1-2-强制转换"></a> 1. 2 强制转换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i =  <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">byte</span> b =  <span class="number">2</span> ;</span><br><span class="line"><span class="comment">// byte x = b + i; // 报错</span></span><br><span class="line"><span class="comment">//int类型和byte类型运算，结果是int类型</span></span><br><span class="line"><span class="keyword">int</span> j = b + i;</span><br><span class="line">System.out.println(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i =  <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">double</span> d =  <span class="number">2</span>. <span class="number">5</span> ;</span><br><span class="line"><span class="comment">//int类型和double类型运算，结果是double类型</span></span><br><span class="line"><span class="comment">//int类型会提升为double类型</span></span><br><span class="line"><span class="keyword">double</span> e = d+i;</span><br><span class="line">System.out.println(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span>‐‐&gt;<span class="keyword">int</span>‐‐&gt;<span class="keyword">long</span>‐‐&gt;<span class="keyword">float</span>‐‐&gt;<span class="keyword">double</span></span><br></pre></td></tr></table></figure><h1 id="1-2-强制转换-2"><a class="markdownIt-Anchor" href="#1-2-强制转换-2"></a> 1. 2 强制转换</h1><p>将 1. 5 赋值到int 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><p>double 类型内存 8 个字节，int 类型内存 4 个字节。 1. 5 是double 类型，取值范围大于int 。可以理解为double 是 8<br>升的水壶，int 是 4 升的水壶，不能把大水壶中的水直接放进小水壶去。</p><p>想要赋值成功，只有通过强制类型转换，将double 类型强制转换成int 类型才能赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">强制类型转换：将取值范围大的类型强制转换成取值范围小的类型。</span><br></pre></td></tr></table></figure><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行。</p><p>转换格式：</p><p>将 1. 5 赋值到int 类型，代码修改为：</p><p>同样道理，当一个short类型与 1 相加，我们知道会类型提升，但是还想给结果赋值给short类型变量，就需要强制转换。</p><h2 id="转换原理图解-2"><a class="markdownIt-Anchor" href="#转换原理图解-2"></a> 转换原理图解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int i &#x3D;  1. 5 ; &#x2F;&#x2F; 错误</span><br></pre></td></tr></table></figure><h3 id="数据类型-变量名-数据类型被转数据值"><a class="markdownIt-Anchor" href="#数据类型-变量名-数据类型被转数据值"></a> 数据类型 变量名 = （数据类型）被转数据值；</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// double类型数据强制转成int类型，直接去掉小数点。</span></span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>) <span class="number">1</span>. <span class="number">5</span> ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//short类型变量，内存中 2 个字节</span></span><br><span class="line"><span class="keyword">short</span> s =  <span class="number">1</span> ;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出现编译失败</span></span><br><span class="line"><span class="comment">s和 1 做运算的时候， 1 是int类型，s会被提升为int类型</span></span><br><span class="line"><span class="comment">s+ 1 后的结果是int类型，将结果在赋值会short类型时发生错误</span></span><br><span class="line"><span class="comment">short内存 2 个字节，int类型 4 个字节</span></span><br><span class="line"><span class="comment">必须将int强制转成short才能完成赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = s +  <span class="number">1</span> ；<span class="comment">//编译失败</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s+ <span class="number">1</span> );<span class="comment">//编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强烈注意"><a class="markdownIt-Anchor" href="#强烈注意"></a> 强烈注意</h2><h3 id="浮点转成整数直接取消小数点可能造成数据损失精度"><a class="markdownIt-Anchor" href="#浮点转成整数直接取消小数点可能造成数据损失精度"></a> 浮点转成整数，直接取消小数点，可能造成数据损失精度。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int 强制转成short 砍掉 2 个字节，可能造成数据丢失。</span><br></pre></td></tr></table></figure><h1 id="1-3-ascii编码表"><a class="markdownIt-Anchor" href="#1-3-ascii编码表"></a> 1. 3 ASCII编码表</h1><h3 id="在计算机的内部都是二进制的-0-1-数据如何让计算机可以直接识别人类文字的问题呢就产生出了编码表的概念"><a class="markdownIt-Anchor" href="#在计算机的内部都是二进制的-0-1-数据如何让计算机可以直接识别人类文字的问题呢就产生出了编码表的概念"></a> 在计算机的内部都是二进制的 0 、 1 数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念。</h3><h3 id="编码表-就是将人类的文字和一个十进制数进行对应起来组成一张表格"><a class="markdownIt-Anchor" href="#编码表-就是将人类的文字和一个十进制数进行对应起来组成一张表格"></a> 编码表 ：就是将人类的文字和一个十进制数进行对应起来组成一张表格。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义s为short范围内最大值</span></span><br><span class="line"><span class="keyword">short</span> s =  <span class="number">32767</span> ;</span><br><span class="line"><span class="comment">// 运算后，强制转换，砍掉 2 个字节后会出现不确定的结果</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s +  <span class="number">10</span> );</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//字符类型变量</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> i =  <span class="number">1</span> ;</span><br><span class="line"><span class="comment">//字符类型和int类型计算</span></span><br><span class="line">System.out.println(c+i);<span class="comment">//输出结果是 98</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="算数运算符包括"><a class="markdownIt-Anchor" href="#算数运算符包括"></a> 算数运算符包括：</h3><h3 id="加法运算字符串连接运算"><a class="markdownIt-Anchor" href="#加法运算字符串连接运算"></a> + 加法运算，字符串连接运算</h3><h3 id="-减法运算"><a class="markdownIt-Anchor" href="#-减法运算"></a> - 减法运算</h3><h3 id="乘法运算"><a class="markdownIt-Anchor" href="#乘法运算"></a> * 乘法运算</h3><h3 id="除法运算"><a class="markdownIt-Anchor" href="#除法运算"></a> / 除法运算</h3><h3 id="取模运算两个数字相除取余数"><a class="markdownIt-Anchor" href="#取模运算两个数字相除取余数"></a> % 取模运算，两个数字相除取余数</h3><h3 id="-自增自减运算"><a class="markdownIt-Anchor" href="#-自增自减运算"></a> ++ 、 - - 自增自减运算</h3><h3 id="字符-数值"><a class="markdownIt-Anchor" href="#字符-数值"></a> 字符 数值</h3><h3 id="0-48"><a class="markdownIt-Anchor" href="#0-48"></a> 0 48</h3><h3 id="9-57"><a class="markdownIt-Anchor" href="#9-57"></a> 9 57</h3><h3 id="a-65"><a class="markdownIt-Anchor" href="#a-65"></a> A 65</h3><h3 id="z-90"><a class="markdownIt-Anchor" href="#z-90"></a> Z 90</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a <span class="number">97</span></span><br><span class="line">z <span class="number">122</span></span><br></pre></td></tr></table></figure><h3 id="人们就规定"><a class="markdownIt-Anchor" href="#人们就规定"></a> 人们就规定：</h3><h3 id="将所有的英文字母数字符号都和十进制进行了对应因此产生了世界上第一张编码表ascii"><a class="markdownIt-Anchor" href="#将所有的英文字母数字符号都和十进制进行了对应因此产生了世界上第一张编码表ascii"></a> 将所有的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">American Standard Code <span class="keyword">for</span> Information Interchange 美国标准信息交换码）。</span><br><span class="line">小贴士：</span><br><span class="line">在<span class="keyword">char</span>类型和<span class="keyword">int</span>类型计算的过程中，<span class="keyword">char</span>类型的字符先查询编码表，得到 <span class="number">97</span> ，再和 <span class="number">1</span> 求和，结果为 <span class="number">98</span> 。<span class="keyword">char</span>类型提升</span><br><span class="line">为了<span class="keyword">int</span>类型。<span class="keyword">char</span>类型内存 <span class="number">2</span> 个字节，<span class="keyword">int</span>类型内存 <span class="number">4</span> 个字节。</span><br></pre></td></tr></table></figure><h1 id="第二章-运算符"><a class="markdownIt-Anchor" href="#第二章-运算符"></a> 第二章 运算符</h1><h1 id="2-1-算数运算符"><a class="markdownIt-Anchor" href="#2-1-算数运算符"></a> 2. 1 算数运算符</h1><p>Java中，整数使用以上运算符，无论怎么计算，也不会得到小数。</p><h3 id="运算变量自己增长-1-反之-运算变量自己减少-1-用法与-一致"><a class="markdownIt-Anchor" href="#运算变量自己增长-1-反之-运算变量自己减少-1-用法与-一致"></a> ++ 运算，变量自己增长 1 。反之，-- 运算，变量自己减少 1 ，用法与++ 一致。</h3><h3 id="独立运算"><a class="markdownIt-Anchor" href="#独立运算"></a> 独立运算：</h3><h3 id="变量在独立运算时前和后没有区别"><a class="markdownIt-Anchor" href="#变量在独立运算时前和后没有区别"></a> 变量在独立运算时，前<ins>和后</ins>没有区别 。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">变量前++ ：例如 ++i 。</span><br><span class="line">变量后++ ：例如 i++ 。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i =  <span class="number">1234</span> ;</span><br><span class="line">System.out.println(i/ <span class="number">1000</span> * <span class="number">1000</span> );<span class="comment">//计算结果是 1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符包括"><a class="markdownIt-Anchor" href="#赋值运算符包括"></a> 赋值运算符包括：</h3><h3 id="等于号"><a class="markdownIt-Anchor" href="#等于号"></a> = 等于号</h3><h3 id="加等于"><a class="markdownIt-Anchor" href="#加等于"></a> += 加等于</h3><h3 id="-减等于"><a class="markdownIt-Anchor" href="#-减等于"></a> - = 减等于</h3><h3 id="乘等于"><a class="markdownIt-Anchor" href="#乘等于"></a> *= 乘等于</h3><h3 id="除等于"><a class="markdownIt-Anchor" href="#除等于"></a> /= 除等于</h3><h3 id="取模等"><a class="markdownIt-Anchor" href="#取模等"></a> %= 取模等</h3><h3 id="混合运算"><a class="markdownIt-Anchor" href="#混合运算"></a> 混合运算：</h3><h3 id="和其他变量放在一起前和后就产生了不同"><a class="markdownIt-Anchor" href="#和其他变量放在一起前和后就产生了不同"></a> 和其他变量放在一起，前<ins>和后</ins>就产生了不同。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量前++ ：变量a自己加 <span class="number">1</span> ，将加 <span class="number">1</span> 后的结果赋值给b，也就是说a先计算。a和b的结果都是 <span class="number">2</span> 。</span><br><span class="line">变量后++ ：变量a先把自己的值 <span class="number">1</span> ，赋值给变量b，此时变量b的值就是 <span class="number">1</span> ，变量a自己再加 <span class="number">1</span> 。a的结果是 <span class="number">2</span> ，b</span><br><span class="line">的结果是 <span class="number">1</span> 。</span><br></pre></td></tr></table></figure><h3 id="符号在字符串中的操作"><a class="markdownIt-Anchor" href="#符号在字符串中的操作"></a> + 符号在字符串中的操作：</h3><h3 id="符号在遇到字符串的时候表示连接-拼接的含义"><a class="markdownIt-Anchor" href="#符号在遇到字符串的时候表示连接-拼接的含义"></a> + 符号在遇到字符串的时候，表示连接、拼接的含义。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;a&quot;+&quot;b&quot;的结果是“ab”，连接含义</span><br></pre></td></tr></table></figure><h1 id="2-2-赋值运算符"><a class="markdownIt-Anchor" href="#2-2-赋值运算符"></a> 2. 2 赋值运算符</h1><h3 id="赋值运算符就是将符号右边的值赋给左边的变量"><a class="markdownIt-Anchor" href="#赋值运算符就是将符号右边的值赋给左边的变量"></a> 赋值运算符，就是将符号右边的值，赋给左边的变量。</h3><h1 id="2-3-比较运算符"><a class="markdownIt-Anchor" href="#2-3-比较运算符"></a> 2. 3 比较运算符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a =  <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">int</span> b = ++a;</span><br><span class="line">System.out.println(a);<span class="comment">//计算结果是 2</span></span><br><span class="line">System.out.println(b);<span class="comment">//计算结果是 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a =  <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line">System.out.println(a);<span class="comment">//计算结果是 2</span></span><br><span class="line">System.out.println(b);<span class="comment">//计算结果是 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">" 5 + 5 ="</span>+ <span class="number">5</span> + <span class="number">5</span> );<span class="comment">//输出 5 + 5 = 55</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i =  <span class="number">5</span> ;</span><br><span class="line">i+= <span class="number">5</span> ;<span class="comment">//计算方式 i=i+ 5  变量i先加 5 ，再赋值变量i</span></span><br><span class="line">System.out.println(i); <span class="comment">//输出结果是 10 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="比较运算符包括"><a class="markdownIt-Anchor" href="#比较运算符包括"></a> 比较运算符包括：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">== 比较符号两边数据是否相等，相等结果是<span class="keyword">true</span>。</span><br><span class="line">&lt; 比较符号左边的数据是否小于右边的数据，如果小于结果是<span class="keyword">true</span>。</span><br><span class="line">&gt; 比较符号左边的数据是否大于右边的数据，如果大于结果是<span class="keyword">true</span>。</span><br><span class="line">&lt;= 比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是<span class="keyword">true</span>。</span><br><span class="line">&gt;= 比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是<span class="keyword">true</span>。</span><br><span class="line">！= 不等于符号 ，如果符号两边的数据不相等，结果是<span class="keyword">true</span>。</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符包括"><a class="markdownIt-Anchor" href="#逻辑运算符包括"></a> 逻辑运算符包括：</h3><h3 id="短路与"><a class="markdownIt-Anchor" href="#短路与"></a> &amp;&amp; 短路与</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 两边都是<span class="keyword">true</span>，结果是<span class="keyword">true</span></span><br><span class="line"><span class="number">2</span>. 一边是<span class="keyword">false</span>，结果是<span class="keyword">false</span></span><br><span class="line">短路特点：符号左边是<span class="keyword">false</span>，右边不再运算</span><br></pre></td></tr></table></figure><h3 id="短路或"><a class="markdownIt-Anchor" href="#短路或"></a> || 短路或</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 两边都是<span class="keyword">false</span>，结果是<span class="keyword">false</span></span><br><span class="line"><span class="number">2</span>. 一边是<span class="keyword">true</span>，结果是<span class="keyword">true</span></span><br><span class="line">短路特点： 符号左边是<span class="keyword">true</span>，右边不再运算</span><br></pre></td></tr></table></figure><h3 id="取反"><a class="markdownIt-Anchor" href="#取反"></a> ！ 取反</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.! true 结果是false</span><br><span class="line">2.! false结果是true</span><br></pre></td></tr></table></figure><h1 id="2-3-比较运算符-2"><a class="markdownIt-Anchor" href="#2-3-比较运算符-2"></a> 2. 3 比较运算符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值true或者false 。</span><br></pre></td></tr></table></figure><h1 id="2-4-逻辑运算符"><a class="markdownIt-Anchor" href="#2-4-逻辑运算符"></a> 2. 4 逻辑运算符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值<span class="keyword">true</span>或者<span class="keyword">false</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println( <span class="number">1</span> == <span class="number">1</span> );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="number">1</span> &lt; <span class="number">2</span> );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="number">3</span> &gt; <span class="number">4</span> );<span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="number">3</span> &lt;= <span class="number">4</span> );<span class="comment">//true</span></span><br><span class="line">System.out.println( <span class="number">3</span> &gt;= <span class="number">4</span> );<span class="comment">//false</span></span><br><span class="line">System.out.println( <span class="number">3</span> != <span class="number">4</span> );<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-5-三元运算符"><a class="markdownIt-Anchor" href="#2-5-三元运算符"></a> 2. 5 三元运算符</h1><h3 id="三元运算符格式"><a class="markdownIt-Anchor" href="#三元运算符格式"></a> 三元运算符格式：</h3><h3 id="三元运算符计算方式"><a class="markdownIt-Anchor" href="#三元运算符计算方式"></a> 三元运算符计算方式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">布尔类型表达式结果是<span class="keyword">true</span>，三元运算符整体结果为结果 <span class="number">1</span> ，赋值给变量。</span><br><span class="line">布尔类型表达式结果是<span class="keyword">false</span>，三元运算符整体结果为结果 <span class="number">2</span> ，赋值给变量。</span><br></pre></td></tr></table></figure><h1 id="第三章-方法入门"><a class="markdownIt-Anchor" href="#第三章-方法入门"></a> 第三章 方法入门</h1><h1 id="3-1-概述"><a class="markdownIt-Anchor" href="#3-1-概述"></a> 3. 1 概述</h1><p>我们在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常的繁琐，而且<br>重复的代码过多。能否避免这些重复的代码呢，就需要使用方法来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">方法：就是将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</span><br></pre></td></tr></table></figure><p>当我们需要这个功能的时候，就可以去调用。这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h1 id="3-2-方法的定义"><a class="markdownIt-Anchor" href="#3-2-方法的定义"></a> 3. 2 方法的定义</h1><h3 id="定义格式"><a class="markdownIt-Anchor" href="#定义格式"></a> 定义格式：</h3><h3 id="定义格式解释"><a class="markdownIt-Anchor" href="#定义格式解释"></a> 定义格式解释：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">修饰符： 目前固定写法 <span class="keyword">public</span> <span class="keyword">static</span> 。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>);<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> &amp;&amp; <span class="keyword">true</span>);<span class="comment">//false，右边不计算</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> || <span class="keyword">false</span>);<span class="comment">//falase</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> || <span class="keyword">true</span>);<span class="comment">//true</span></span><br><span class="line">System.out.println(<span class="keyword">true</span> || <span class="keyword">false</span>);<span class="comment">//true，右边不计算</span></span><br><span class="line">System.out.println(!<span class="keyword">false</span>);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型-变量名-布尔类型表达式结果-1-结果-2"><a class="markdownIt-Anchor" href="#数据类型-变量名-布尔类型表达式结果-1-结果-2"></a> 数据类型 变量名 = 布尔类型表达式？结果 1 ：结果 2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = ( <span class="number">1</span> == <span class="number">2</span> ?  <span class="number">100</span>  :  <span class="number">200</span> );</span><br><span class="line">System.out.println(i);<span class="comment">// 200</span></span><br><span class="line"><span class="keyword">int</span> j = ( <span class="number">3</span> &lt;= <span class="number">4</span> ?  <span class="number">500</span>  :  <span class="number">600</span> );</span><br><span class="line">System.out.println(j);<span class="comment">// 500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰符-返回值类型-方法名-参数列表"><a class="markdownIt-Anchor" href="#修饰符-返回值类型-方法名-参数列表"></a> 修饰符 返回值类型 方法名 （参数列表）｛</h3><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码…</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">return ;</span><br><span class="line">｝</span><br><span class="line">返回值类型： 目前固定写法 void ，其他返回值类型在后面的课程讲解。</span><br><span class="line">方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法。</span><br><span class="line">参数列表： 目前无参数， 带有参数的方法在后面的课程讲解。</span><br><span class="line">return：方法结束。因为返回值类型是void，方法大括号内的return可以不写。</span><br><span class="line">举例：</span><br></pre></td></tr></table></figure><h1 id="3-3-方法的调用"><a class="markdownIt-Anchor" href="#3-3-方法的调用"></a> 3. 3 方法的调用</h1><p>方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在<br>主方法中，直接写要调用的方法名字就可以调用了。</p><h1 id="3-4-调用练习"><a class="markdownIt-Anchor" href="#3-4-调用练习"></a> 3. 4 调用练习</h1><h3 id="将三元运算符代码抽取到自定义的方法中并调用"><a class="markdownIt-Anchor" href="#将三元运算符代码抽取到自定义的方法中并调用"></a> 将三元运算符代码抽取到自定义的方法中，并调用。</h3><h1 id="3-5-注意事项"><a class="markdownIt-Anchor" href="#3-5-注意事项"></a> 3. 5 注意事项</h1><h3 id="方法定义注意事项"><a class="markdownIt-Anchor" href="#方法定义注意事项"></a> 方法定义注意事项：</h3><h3 id="方法必须定义在一类中方法外"><a class="markdownIt-Anchor" href="#方法必须定义在一类中方法外"></a> 方法必须定义在一类中方法外</h3><h3 id="方法不能定义在另一个方法的里面"><a class="markdownIt-Anchor" href="#方法不能定义在另一个方法的里面"></a> 方法不能定义在另一个方法的里面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一个方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用定义的方法method</span></span><br><span class="line">method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，被main方法调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自己定义的方法，需要被main调用运行"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用定义的方法operator</span></span><br><span class="line">operator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，方法中定义三元运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i =  <span class="number">0</span> ;</span><br><span class="line">i = ( <span class="number">1</span> == <span class="number">2</span> ?  <span class="number">100</span> : <span class="number">200</span> );</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">int</span> j =  <span class="number">0</span>  ;</span><br><span class="line">j = ( <span class="number">3</span> &lt;= <span class="number">4</span> ?  <span class="number">500</span> : <span class="number">600</span> );</span><br><span class="line">System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章-jshell脚本工具"><a class="markdownIt-Anchor" href="#第四章-jshell脚本工具"></a> 第四章 JShell脚本工具</h1><h2 id="jshell脚本工具是jdk-9-的新特性"><a class="markdownIt-Anchor" href="#jshell脚本工具是jdk-9-的新特性"></a> JShell脚本工具是JDK 9 的新特性</h2><p>什么时候会用到JShell工具呢，当我们编写的代码非常少的时候，而又不愿意编写类，main方法，也不愿意去编译和运<br>行，这个时候可以使用JShell工具。</p><p>启动JShell工具，在DOS命令行直接输入JShell命令。</p><p>接下来可以编写Java代码，无需写类和方法，直接写方法中的代码即可，同时无需编译和运行，直接回车即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确写法，类中，main方法外面可以定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//错误写法，一个方法不能定义在另一方法内部</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小贴士"><a class="markdownIt-Anchor" href="#小贴士"></a> 小贴士:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JShell工具，只适合片段代码的测试，开发更多内容，建议编写在方法中。</span><br></pre></td></tr></table></figure><h1 id="第五章-扩展知识点"><a class="markdownIt-Anchor" href="#第五章-扩展知识点"></a> 第五章 扩展知识点</h1><h1 id="5-1-符号的扩展"><a class="markdownIt-Anchor" href="#5-1-符号的扩展"></a> 5. 1 +=符号的扩展</h1><h3 id="下面的程序有问题吗"><a class="markdownIt-Anchor" href="#下面的程序有问题吗"></a> 下面的程序有问题吗？</h3><p>分析： s += 1 逻辑上看作是s = s + 1 计算结果被提升为int类型，再向short类型赋值时发生错误，因为不能将取值范围<br>大的类型赋值到取值范围小的类型。但是，s=s+ 1 进行两次运算，+= 是一个运算符，只运算一次，并带有强制转换的特点，<br>也就是说s += 1 就是s = (short)(s + 1 )，因此程序没有问题编译通过，运行结果是 2.</p><h1 id="5-2-常量和变量的运算"><a class="markdownIt-Anchor" href="#5-2-常量和变量的运算"></a> 5. 2 常量和变量的运算</h1><h3 id="下面的程序有问题吗-2"><a class="markdownIt-Anchor" href="#下面的程序有问题吗-2"></a> 下面的程序有问题吗？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">short</span> s =  <span class="number">1</span> ;</span><br><span class="line">s+= <span class="number">1</span> ;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：b 3 = 1 + 2 ， 1 和 2 是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了 1 + 2 的结果并没<br>有超过byte类型的取值范围，可以赋值给变量b 3 ，因此b 3 = 1 + 2 是正确的。</p><p>反之，b 4 = b 2 + b 3 ，b 2 和 b 3 是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定b 2 +b 3 的结果是什<br>么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。</p><p>在jshell中体现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span> b <span class="number">1</span> = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">byte</span> b <span class="number">2</span> = <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">byte</span> b <span class="number">3</span> = <span class="number">1</span>  +  <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">byte</span> b <span class="number">4</span> =b <span class="number">1</span>  + b <span class="number">2</span> ;</span><br><span class="line">System.out.println(b <span class="number">3</span> );</span><br><span class="line">System.out.println(b <span class="number">4</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;&lt;h1 id=&quot;java数据类型转换-运算符-方法入门&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java数据类型转换-运算符-方法入门&quot;&gt;&lt;/a&gt; Java	数据类型转换、运算符、方法入门&lt;/h1&gt;&lt;h1 id=&quot;文章内容&quot;&gt;&lt;a cla
      
    
    </summary>
    
    
      <category term="java" scheme="http://vinceshu.cn/categories/java/"/>
    
    
      <category term="javase" scheme="http://vinceshu.cn/tags/javase/"/>
    
      <category term="java基础" scheme="http://vinceshu.cn/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java  前言、入门程序、常量、变量</title>
    <link href="http://vinceshu.cn/2019/11/21/Java%20%20%E5%89%8D%E8%A8%80%E3%80%81%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F/"/>
    <id>http://vinceshu.cn/2019/11/21/Java%20%20%E5%89%8D%E8%A8%80%E3%80%81%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F%E3%80%81%E5%B8%B8%E9%87%8F%E3%80%81%E5%8F%98%E9%87%8F/</id>
    <published>2019-11-21T08:56:18.000Z</published>
    <updated>2020-07-26T15:41:54.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-前言-入门程序-常量-变量"><a class="markdownIt-Anchor" href="#java-前言-入门程序-常量-变量"></a> Java 前言、入门程序、常量、变量</h1><h2 id="文章内容"><a class="markdownIt-Anchor" href="#文章内容"></a> 文章内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java语言的发展历史</span><br><span class="line">Java开发环境搭建</span><br><span class="line">编写HelloWorld程序</span><br><span class="line">常量和变量</span><br></pre></td></tr></table></figure><h2 id="学习目标"><a class="markdownIt-Anchor" href="#学习目标"></a> 学习目标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">能够计算二进制和十进制数之间的互转</span><br><span class="line">能够使用常见的DOS命令</span><br><span class="line">理解Java语言的跨平台实现原理</span><br><span class="line">理解JDK和JRE的组成和作用</span><br><span class="line">能够配置环境变量JAVA_HOME</span><br><span class="line">能够编写HelloWorld程序编译并执行</span><br><span class="line">理解关键字的含义</span><br><span class="line">理解标识符的含义</span><br><span class="line">能够定义出所有类型的常量</span><br><span class="line">理解Java中的基本数据类型分类</span><br><span class="line">能够定义 8 种基本数据集类型的变量</span><br></pre></td></tr></table></figure><h1 id="第一章-开发前言"><a class="markdownIt-Anchor" href="#第一章-开发前言"></a> 第一章 开发前言</h1><h2 id="1-1-java语言概述"><a class="markdownIt-Anchor" href="#1-1-java语言概述"></a> 1. 1 Java语言概述</h2><h2 id="什么是java语言"><a class="markdownIt-Anchor" href="#什么是java语言"></a> 什么是Java语言</h2><p>Java语言是美国Sun公司（Stanford University Network），在 1995 年推出的高级的编程语言。所谓编程语言，是<br>计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。</p><h2 id="java语言发展历史"><a class="markdownIt-Anchor" href="#java语言发展历史"></a> Java语言发展历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1995 年Sun公司发布Java 1. 0 版本</span><br><span class="line">1997 年发布Java 1. 1 版本</span><br><span class="line">1998 年发布Java 1. 2 版本</span><br><span class="line">2000 年发布Java 1. 3 版本</span><br><span class="line">2002 年发布Java 1. 4 版本</span><br><span class="line">2004 年发布Java 1. 5 版本</span><br><span class="line">2006 年发布Java 1. 6 版本</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2009 年Oracle甲骨文公司收购Sun公司，并于 2011 发布Java 1. 7 版本</span><br><span class="line">2014 年发布Java 1. 8 版本</span><br><span class="line">2017 年发布Java 9. 0 版本</span><br></pre></td></tr></table></figure><h2 id="java语言能做什么"><a class="markdownIt-Anchor" href="#java语言能做什么"></a> Java语言能做什么</h2><p>Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服<br>务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><p>![](…\source\img\java 前言、入门程序、常量、变量\JD.png)</p><p>![shunfeng](E:\blog\source\img\java 前言、入门程序、常量、变量\shunfeng.png)</p><p>![TB](…\source\img\java 前言、入门程序、常量、变量\TB.png)</p><h2 id="1-2-计算机基础知识"><a class="markdownIt-Anchor" href="#1-2-计算机基础知识"></a> 1. 2 计算机基础知识</h2><h2 id="二进制"><a class="markdownIt-Anchor" href="#二进制"></a> 二进制</h2><h3 id="计算机中的数据不同于人们生活中的数据人们生活采用十进制数而计算机中全部采用二进制数表示它只包含"><a class="markdownIt-Anchor" href="#计算机中的数据不同于人们生活中的数据人们生活采用十进制数而计算机中全部采用二进制数表示它只包含"></a> 计算机中的数据不同于人们生活中的数据，人们生活采用十进制数，而计算机中全部采用二进制数表示，它只包含</h3><p>0 、 1 两个数，逢二进一， 1 + 1 = 10 。每一个 0 或者每一个 1 ，叫做一个bit（比特）。</p><p>下面了解一下十进制和二进制数据之间的转换计算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">十进制数据转成二进制数据：使用除以 2 获取余数的方式</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5Cvinceshu%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200726233733893.png" alt="image-20200726233733893"></p><h3 id="二进制数据转成十进制数据使用-8421-编码的方式"><a class="markdownIt-Anchor" href="#二进制数据转成十进制数据使用-8421-编码的方式"></a> 二进制数据转成十进制数据：使用 8421 编码的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">小贴士：</span><br><span class="line">二进制数系统中，每个 0 或 1 就是一个位，叫做bit（比特）。</span><br></pre></td></tr></table></figure><h2 id="字节"><a class="markdownIt-Anchor" href="#字节"></a> 字节</h2><h3 id="字节是我们常见的计算机中最小存储单元-计算机存储任何的数据都是以字节的形式存储右键点击文件属性"><a class="markdownIt-Anchor" href="#字节是我们常见的计算机中最小存储单元-计算机存储任何的数据都是以字节的形式存储右键点击文件属性"></a> 字节是我们常见的计算机中最小存储单元。计算机存储任何的数据，都是以字节的形式存储，右键点击文件属性，</h3><h3 id="我们可以查看文件的字节大小"><a class="markdownIt-Anchor" href="#我们可以查看文件的字节大小"></a> 我们可以查看文件的字节大小。</h3><p>8 个bit（二进制位） 0000 - 0000 表示为 1 个字节，写成 1 byte或者 1 B。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">8 bit &#x3D; 1 B</span><br><span class="line">1024 B &#x3D; 1 KB</span><br><span class="line">1024 KB &#x3D; 1 MB</span><br><span class="line">1024 MB &#x3D; 1 GB</span><br><span class="line">1024 GB &#x3D; 1 TB</span><br></pre></td></tr></table></figure><h2 id="常用dos命令"><a class="markdownIt-Anchor" href="#常用dos命令"></a> 常用DOS命令</h2><p>Java语言的初学者，学习一些DOS命令，会非常有帮助。DOS是一个早期的操作系统，现在已经被Windows系统取<br>代，对于我们开发人员，目前需要在DOS中完成一些事情，因此就需要掌握一些必要的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入DOS操作窗口</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按下Windows+R键盘，打开运行窗口，输入cmd回车，进入到DOS的操作窗口。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">打开DOS命令行后，看到一个路径 c:\user 就表示我们现在操作的磁盘是c盘。</span><br></pre></td></tr></table></figure><h3 id="命令-操作符号"><a class="markdownIt-Anchor" href="#命令-操作符号"></a> 命令 操作符号</h3><h3 id="盘符切换命令-盘符名"><a class="markdownIt-Anchor" href="#盘符切换命令-盘符名"></a> 盘符切换命令 盘符名:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查看当前文件夹 dir</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进入文件夹命令 cd 文件夹名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">退出文件夹命令 cd..</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">退出到磁盘根目录 cd\</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">清屏 cls</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3><h1 id="第二章-java语言开发环境搭建"><a class="markdownIt-Anchor" href="#第二章-java语言开发环境搭建"></a> 第二章 Java语言开发环境搭建</h1><h2 id="2-1-java虚拟机jvm"><a class="markdownIt-Anchor" href="#2-1-java虚拟机jvm"></a> 2. 1 Java虚拟机——JVM</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JVM（Java Virtual Machine ）：Java虚拟机，简称JVM，是运行所有Java程序的假想计算机，是Java程序的</span><br><span class="line">运行环境，是Java 最具吸引力的特性之一。我们编写的Java代码，都运行在JVM 之上。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跨平台：任何软件的运行，都必须要运行在操作系统之上，而我们用Java编写的软件可以运行在任何的操作系</span><br><span class="line">统上，这个特性称为Java语言的跨平台特性。该特性是由JVM实现的，我们编写的程序运行在JVM上，而JVM</span><br><span class="line">运行在操作系统上。</span><br></pre></td></tr></table></figure><p>如图所示，Java的虚拟机本身不具备跨平台功能的，每个操作系统下都有不同版本的虚拟机。</p><h2 id="2-2-jre-和-jdk"><a class="markdownIt-Anchor" href="#2-2-jre-和-jdk"></a> 2. 2 JRE 和 JDK</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JRE (Java Runtime Environment) ：是Java程序的运行时环境，包含JVM 和运行时所需要的核心类库 。</span><br><span class="line">JDK (Java Development Kit)：是Java程序开发工具包，包含JRE 和开发人员使用的工具。</span><br></pre></td></tr></table></figure><p>我们想要运行一个已有的Java程序，那么只需安装JRE 即可。</p><p>我们想要开发一个全新的Java程序，那么必须安装JDK 。</p><h3 id="小贴士"><a class="markdownIt-Anchor" href="#小贴士"></a> 小贴士：</h3><h3 id="三者关系-jdk-jre-jvm"><a class="markdownIt-Anchor" href="#三者关系-jdk-jre-jvm"></a> 三者关系： JDK &gt; JRE &gt; JVM</h3><h2 id="2-3-jdk-9-安装图解"><a class="markdownIt-Anchor" href="#2-3-jdk-9-安装图解"></a> 2. 3 JDK 9 安装图解</h2><h3 id="小贴士-2"><a class="markdownIt-Anchor" href="#小贴士-2"></a> 小贴士：</h3><h3 id="安装路径中不要包含中文和空格"><a class="markdownIt-Anchor" href="#安装路径中不要包含中文和空格"></a> 安装路径中，不要包含中文和空格。</h3><h2 id="2-4-java_home环境变量的配置"><a class="markdownIt-Anchor" href="#2-4-java_home环境变量的配置"></a> 2. 4 JAVA_HOME环境变量的配置</h2><h2 id="配置环境变量作用"><a class="markdownIt-Anchor" href="#配置环境变量作用"></a> 配置环境变量作用</h2><p>开发Java程序，需要使用JDK中提供的工具，工具在JDK 9 安装目录的bin 目录下。</p><p>在DOS命令行下使用这些工具，就要先进入到JDK的bin目录下，这个过程就会非常的麻烦。</p><p>不进入JDK的bin目录，这些工具就不能使用，会报错。</p><h3 id="为了开发方便我们想在任意的目录下都可以使用jdk的开发工具则必须要配置环境变量配置环境变量的意义"><a class="markdownIt-Anchor" href="#为了开发方便我们想在任意的目录下都可以使用jdk的开发工具则必须要配置环境变量配置环境变量的意义"></a> 为了开发方便，我们想在任意的目录下都可以使用JDK的开发工具，则必须要配置环境变量，配置环境变量的意义</h3><h3 id="在于告诉操作系统我们使用的jdk开发工具在哪个目录下"><a class="markdownIt-Anchor" href="#在于告诉操作系统我们使用的jdk开发工具在哪个目录下"></a> 在于告诉操作系统，我们使用的JDK开发工具在哪个目录下。</h3><h2 id="配置环境变量步骤"><a class="markdownIt-Anchor" href="#配置环境变量步骤"></a> 配置环境变量步骤</h2><p>Windows 7 , 8 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 计算机鼠标右键,选择属性</span><br><span class="line">2. 选择高级系统设置</span><br><span class="line">3. 高级 选项卡，点击环境变量</span><br><span class="line">4. 点击新建 ，创建新的环境变量</span><br><span class="line">5. 变量名输入JAVA_HOME，变量值输入JDK 9 的安装目录 c:\Java 9 \jdk- 9. 0. 1</span><br><span class="line">6. 选中Path 环境变量，双击或者点击编辑</span><br><span class="line">7. 在变量值的最前面，键入%JAVA_HOME%\bin; 分号必须要写，必须是英文格式。</span><br><span class="line">8. 环境变量配置完成，重新开启DOS命令行，在任意目录下输入javac 命令，运行成功。</span><br></pre></td></tr></table></figure><p>Windows 10 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 文件资源管理器 - -&gt; 此电脑鼠标右键 - -&gt; 选择属性</span><br><span class="line">2. 选择高级系统设置 - -&gt; 选择 环境变量</span><br><span class="line">3. 点击下方系统变量的 新建 ，创建新的环境变量，变量名输入JAVA_HOME，变量值输入JDK 9 的安装目录</span><br></pre></td></tr></table></figure><h3><a class="markdownIt-Anchor" href="#"></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\ 02 _DevelopTools\Java\jdk- 9. 0. 1</span><br></pre></td></tr></table></figure><ol start="4"><li><p>选中Path 环境变量，双击或者点击编辑</p></li><li><p>点击新建，键入%JAVA_HOME%\bin ，必须是英文格式。选中该行，上移到最上方，点击确定。</p></li><li><p>环境变量配置完成，重新开启DOS命令行，在任意目录下输入javac 命令。</p></li></ol><h1 id="第三章-helloworld入门程序"><a class="markdownIt-Anchor" href="#第三章-helloworld入门程序"></a> 第三章 HelloWorld入门程序</h1><h2 id="3-1-程序开发步骤说明"><a class="markdownIt-Anchor" href="#3-1-程序开发步骤说明"></a> 3. 1 程序开发步骤说明</h2><p>开发环境已经搭建完毕，可以开发我们第一个Java程序了。</p><p>Java程序开发三步骤：编写、编译、运行。</p><h2 id="3-2-编写java源程序"><a class="markdownIt-Anchor" href="#3-2-编写java源程序"></a> 3. 2 编写Java源程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 在d:\day 01 目录下新建文本文件，完整的文件名修改为HelloWorld.java，其中文件名为HelloWorld，后</span><br><span class="line">缀名必须为.java 。</span><br><span class="line">2. 用记事本打开</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用notepad++记事本软件。</span><br><span class="line">3. 在文件中键入文本并保存，代码如下：</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件名必须是HelloWorld ，保证文件名和类的名字是一致的，注意大小写。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每个字母和符号必须与示例代码一模一样。</span><br></pre></td></tr></table></figure><p>第一个HelloWord 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我<br>们必须将编写好的Java源文件 编译成JVM可以看懂的字节码文件 。</p><h2 id="3-3-编译java源文件"><a class="markdownIt-Anchor" href="#3-3-编译java源文件"></a> 3. 3 编译Java源文件</h2><p>在DOS命令行中，进入Java源文件的目录，使用javac 命令进行编译。</p><p>命令：</p><h3 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例：</h3><p>编译成功后，命令行没有任何提示。打开d:\day 01 目录，发现产生了一个新的文件^ HelloWorld.class，该文件<br>就是编译后的文件，是Java的可运行文件，称为字节码文件，有了字节码文件，就可以运行程序了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java源文件的编译工具javac.exe，在JDK安装目录的bin目录下。但是由于配置了环境变量，可以再任意目</span><br><span class="line">录下使用。</span><br></pre></td></tr></table></figure><h2 id="3-4-运行java程序"><a class="markdownIt-Anchor" href="#3-4-运行java程序"></a> 3. 4 运行Java程序</h2><p>在DOS命令行中，进入Java源文件的目录，使用java 命令进行运行。</p><p>命令：</p><h3 id="举例-2"><a class="markdownIt-Anchor" href="#举例-2"></a> 举例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac Java源文件名.后缀名</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java 类名字</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWord 不要写 不要写 不要写 .class</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java程序.class文件 的运行工具java.exe ，在JDK安装目录的bin目录下。但是由于配置了环境变量，可</span><br><span class="line">以再任意目录下使用。</span><br></pre></td></tr></table></figure><h2 id="3-5-入门程序说明"><a class="markdownIt-Anchor" href="#3-5-入门程序说明"></a> 3. 5 入门程序说明</h2><h2 id="编译和运行是两回事"><a class="markdownIt-Anchor" href="#编译和运行是两回事"></a> 编译和运行是两回事</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">编译：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中，javac 编译器会检查我们</span><br><span class="line">所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。</span><br><span class="line">运行：是指将class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</span><br></pre></td></tr></table></figure><h2 id="关于main方法"><a class="markdownIt-Anchor" href="#关于main方法"></a> 关于main方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main方法：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多</span><br><span class="line">少程序，JVM在运行的时候，都会从main方法这里开始执行。</span><br></pre></td></tr></table></figure><h2 id="3-6-添加注释comment"><a class="markdownIt-Anchor" href="#3-6-添加注释comment"></a> 3. 6 添加注释comment</h2><h3 id="注释就是对代码的解释和说明-其目的是让人们能够更加轻松地了解代码-为代码添加注释是十分必须"><a class="markdownIt-Anchor" href="#注释就是对代码的解释和说明-其目的是让人们能够更加轻松地了解代码-为代码添加注释是十分必须"></a> 注释：就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须</h3><h3 id="要的它不影响程序的编译和运行"><a class="markdownIt-Anchor" href="#要的它不影响程序的编译和运行"></a> 要的，它不影响程序的编译和运行。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java中有单行注释和多行注释</span><br><span class="line">单行注释以 &#x2F;&#x2F;开头 换行结束</span><br><span class="line">多行注释以 &#x2F;*开头 以*&#x2F;结束</span><br></pre></td></tr></table></figure><h2 id="3-7-关键字keywords"><a class="markdownIt-Anchor" href="#3-7-关键字keywords"></a> 3. 7 关键字keywords</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">关键字：是指在程序中，Java已经定义好的单词，具有特殊含义。</span><br><span class="line">HelloWorld案例中，出现的关键字有 public 、class 、 static 、 void 等，这些单词已经被</span><br><span class="line">Java定义好，全部都是小写字母，notepad++中颜色特殊。</span><br><span class="line">关键字比较多，不能死记硬背，学到哪里记到哪里即可。</span><br></pre></td></tr></table></figure><h2 id="3-8-标识符"><a class="markdownIt-Anchor" href="#3-8-标识符"></a> 3. 8 标识符</h2><h3 id="标识符是指在程序中我们自己定义内容-比如类的名字-方法的名字和变量的名字等等都是标识符"><a class="markdownIt-Anchor" href="#标识符是指在程序中我们自己定义内容-比如类的名字-方法的名字和变量的名字等等都是标识符"></a> 标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HelloWorld案例中，出现的标识符有类名字HelloWorld 。</span><br></pre></td></tr></table></figure><h3 id="类型-含义-数据举例"><a class="markdownIt-Anchor" href="#类型-含义-数据举例"></a> 类型 含义 数据举例</h3><h3 id="整数常量-所有的整数-0-1-567-9"><a class="markdownIt-Anchor" href="#整数常量-所有的整数-0-1-567-9"></a> 整数常量 所有的整数 0 ， 1 ， 567 ， - 9</h3><h3 id="小数常量-所有的小数-0-0-0-1-2-55"><a class="markdownIt-Anchor" href="#小数常量-所有的小数-0-0-0-1-2-55"></a> 小数常量 所有的小数 0. 0 ， - 0. 1 ， 2. 55</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符常量 单引号引起来,只能写一个字符,必须有内容 &#39;a&#39; ， &#39; &#39;， &#39;好&#39;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串常量 双引号引起来,可以写多个字符,也可以不写 &quot;A&quot; ，&quot;Hello&quot; ，&quot;你好&quot; ，&quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔常量 只有两个值（流程控制中讲解） true ， false</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">空常量 只有一个值（引用数据类型中讲解） null</span><br></pre></td></tr></table></figure><h3 id="命名规则硬性要求"><a class="markdownIt-Anchor" href="#命名规则硬性要求"></a> 命名规则：硬性要求</h3><h3 id="标识符可以包含英文字母-26-个区分大小写-0-9-数字-美元符号和_下划线"><a class="markdownIt-Anchor" href="#标识符可以包含英文字母-26-个区分大小写-0-9-数字-美元符号和_下划线"></a> 标识符可以包含英文字母 26 个(区分大小写)、 0 - 9 数字 、$（美元符号）和_（下划线）。</h3><h3 id="标识符不能以数字开头"><a class="markdownIt-Anchor" href="#标识符不能以数字开头"></a> 标识符不能以数字开头。</h3><h3 id="标识符不能是关键字"><a class="markdownIt-Anchor" href="#标识符不能是关键字"></a> 标识符不能是关键字。</h3><h3 id="命名规范软性建议"><a class="markdownIt-Anchor" href="#命名规范软性建议"></a> 命名规范：软性建议</h3><h3 id="类名规范首字母大写后面每个单词首字母大写大驼峰式"><a class="markdownIt-Anchor" href="#类名规范首字母大写后面每个单词首字母大写大驼峰式"></a> 类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。</h3><h3 id="方法名规范-首字母小写后面每个单词首字母大写小驼峰式"><a class="markdownIt-Anchor" href="#方法名规范-首字母小写后面每个单词首字母大写小驼峰式"></a> 方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。</h3><h3 id="变量名规范全部小写"><a class="markdownIt-Anchor" href="#变量名规范全部小写"></a> 变量名规范：全部小写。</h3><h1 id="第四章-常量"><a class="markdownIt-Anchor" href="#第四章-常量"></a> 第四章 常量</h1><h2 id="4-1-概述"><a class="markdownIt-Anchor" href="#4-1-概述"></a> 4. 1 概述</h2><p>常量：是指在Java程序中固定不变的数据。</p><h2 id="4-2-分类"><a class="markdownIt-Anchor" href="#4-2-分类"></a> 4. 2 分类</h2><h2 id="4-3-练习"><a class="markdownIt-Anchor" href="#4-3-练习"></a> 4. 3 练习</h2><h3 id="需求输出各种类型的常量"><a class="markdownIt-Anchor" href="#需求输出各种类型的常量"></a> 需求：输出各种类型的常量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ConstantDemo &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">&#x2F;&#x2F;输出整数常量</span><br><span class="line">System.out.println( 123 );</span><br><span class="line">&#x2F;&#x2F;输出小数常量</span><br><span class="line">System.out.println( 0. 125 );</span><br><span class="line">&#x2F;&#x2F;输出字符常量</span><br><span class="line">System.out.println(&#39;A&#39;);</span><br><span class="line">&#x2F;&#x2F;输出布尔常量</span><br><span class="line">System.out.println(true);</span><br><span class="line">&#x2F;&#x2F;输出字符串常量</span><br><span class="line">System.out.println(&quot;你好Java&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型-关键字-内存占用-取值范围"><a class="markdownIt-Anchor" href="#数据类型-关键字-内存占用-取值范围"></a> 数据类型 关键字 内存占用 取值范围</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字节型 byte 1 个字节 - 128 ~ 127</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">短整型 short 2 个字节 - 32768 ~ 32767</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">整型 int（默认） 4 个字节 - 231 次方~ 2 的 31 次方- 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">长整型 long 8 个字节 - 2 的 63 次方~ 2 的 63 次方- 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单精度浮点数 float 4 个字节 1. 4013 E- 45 ~ 3. 4028 E+ 38</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">双精度浮点数 double（默认） 8 个字节 4. 9 E- 324 ~ 1. 7977 E+ 308</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符型 char 2 个字节 0 - 65535</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">布尔类型 boolean 1 个字节 true，false</span><br></pre></td></tr></table></figure><h1 id="第五章-变量和数据类型"><a class="markdownIt-Anchor" href="#第五章-变量和数据类型"></a> 第五章 变量和数据类型</h1><h2 id="5-1-变量概述"><a class="markdownIt-Anchor" href="#5-1-变量概述"></a> 5. 1 变量概述</h2><h3 id="变量常量是固定不变的数据那么在程序中可以变化的量称为变量"><a class="markdownIt-Anchor" href="#变量常量是固定不变的数据那么在程序中可以变化的量称为变量"></a> 变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数学中，可以使用字母代替数字运算,例如 x&#x3D; 1 + 5 或者 6 &#x3D;x+ 5 。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存 5 ，x也可</span><br><span class="line">以保存 6 ，这样x保存的数据是可以改变的，也就是我们所讲解的变量。</span><br></pre></td></tr></table></figure><p>Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</p><h2 id="5-2-数据类型"><a class="markdownIt-Anchor" href="#5-2-数据类型"></a> 5. 2 数据类型</h2><h2 id="数据类型分类"><a class="markdownIt-Anchor" href="#数据类型分类"></a> 数据类型分类</h2><p>Java的数据类型分为两大类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型：包括 整数、浮点数、字符、布尔。</span><br><span class="line">引用数据类型：包括 类、数组、接口。</span><br></pre></td></tr></table></figure><h2 id="基本数据类型"><a class="markdownIt-Anchor" href="#基本数据类型"></a> 基本数据类型</h2><h3 id="四类八种基本数据类型"><a class="markdownIt-Anchor" href="#四类八种基本数据类型"></a> 四类八种基本数据类型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java中的默认类型：整数类型是int 、浮点类型是double 。</span><br></pre></td></tr></table></figure><h2 id="5-3-变量的定义"><a class="markdownIt-Anchor" href="#5-3-变量的定义"></a> 5. 3 变量的定义</h2><h3 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> }</h3><h3 id="变量定义的格式包括三个要素数据类型-变量名-数据值"><a class="markdownIt-Anchor" href="#变量定义的格式包括三个要素数据类型-变量名-数据值"></a> 变量定义的格式包括三个要素：数据类型 、 变量名 、 数据值 。</h3><h2 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式</h2><h2 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h2><h3 id="定义所有基本数据类型的变量代码如下"><a class="markdownIt-Anchor" href="#定义所有基本数据类型的变量代码如下"></a> 定义所有基本数据类型的变量，代码如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long类型：建议数据后加L表示。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float类型：建议数据后加F表示。</span><br></pre></td></tr></table></figure><h2 id="5-4-注意事项"><a class="markdownIt-Anchor" href="#5-4-注意事项"></a> 5. 4 注意事项</h2><h3 id="变量名称在同一个大括号范围内变量的名字不可以相同"><a class="markdownIt-Anchor" href="#变量名称在同一个大括号范围内变量的名字不可以相同"></a> 变量名称：在同一个大括号范围内，变量的名字不可以相同。</h3><h3 id="变量赋值定义的变量不赋值不能使用"><a class="markdownIt-Anchor" href="#变量赋值定义的变量不赋值不能使用"></a> 变量赋值：定义的变量，不赋值不能使用。</h3><h3 id="数据类型-变量名-数据值"><a class="markdownIt-Anchor" href="#数据类型-变量名-数据值"></a> 数据类型 变量名 = 数据值;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Variable &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">&#x2F;&#x2F;定义字节型变量</span><br><span class="line">byte b &#x3D;  100 ;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#x2F;&#x2F;定义短整型变量</span><br><span class="line">short s &#x3D;  1000 ;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#x2F;&#x2F;定义整型变量</span><br><span class="line">int i &#x3D;  123456 ;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#x2F;&#x2F;定义长整型变量</span><br><span class="line">long l &#x3D;  12345678900 L;</span><br><span class="line">System.out.println(l);</span><br><span class="line">&#x2F;&#x2F;定义单精度浮点型变量</span><br><span class="line">float f &#x3D;  5. 5 F;</span><br><span class="line">System.out.println(f);</span><br><span class="line">&#x2F;&#x2F;定义双精度浮点型变量</span><br><span class="line">double d &#x3D;  8. 5 ;</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#x2F;&#x2F;定义布尔型变量</span><br><span class="line">boolean bool &#x3D; false;</span><br><span class="line">System.out.println(bool);</span><br><span class="line">&#x2F;&#x2F;定义字符型变量</span><br><span class="line">char c &#x3D; &#39;A&#39;;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-前言-入门程序-常量-变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-前言-入门程序-常量-变量&quot;&gt;&lt;/a&gt; Java 前言、入门程序、常量、变量&lt;/h1&gt;&lt;h2 id=&quot;文章内容&quot;&gt;&lt;a class=&quot;mark
      
    
    </summary>
    
    
      <category term="java" scheme="http://vinceshu.cn/categories/java/"/>
    
    
      <category term="javase" scheme="http://vinceshu.cn/tags/javase/"/>
    
      <category term="java基础" scheme="http://vinceshu.cn/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
